rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // All authenticated users can read other users' public profile data
      allow read: if request.auth != null;
    }
    
    // Blogs collection rules
    match /blogs/{blogId} {
      // Anyone can read blogs (public content)
      allow read: if true;
      
      // Only authenticated users can create blogs
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // Users can update blogs they authored, or update likes/bookmarks/comments
      allow update: if request.auth != null && (
        // Author can update their own blog
        request.auth.uid == resource.data.authorId ||
        // Users can like/unlike blogs
        request.auth.uid in request.resource.data.keys() ||
        // Users can bookmark/unbookmark blogs
        request.auth.uid in resource.data.bookmarks ||
        request.auth.uid in request.resource.data.bookmarks ||
        // Users can like/unlike blogs  
        request.auth.uid in resource.data.likes ||
        request.auth.uid in request.resource.data.likes
      );
      
      // Only blog authors can delete their blogs
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments subcollection rules (if you plan to use subcollections)
    match /blogs/{blogId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        request.auth.uid in resource.data.likes ||
        request.auth.uid in request.resource.data.likes
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
  }
}
