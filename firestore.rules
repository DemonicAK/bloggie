rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // All authenticated users can read other users' public profile data
      allow read: if request.auth != null;
      
      // Ensure username uniqueness and format on create/update
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUsername(request.resource.data.username) &&
        !usernameExists(request.resource.data.username);
        
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        // If username is being updated, validate it
        (!("username" in request.resource.data) || 
         (isValidUsername(request.resource.data.username) && 
          (request.resource.data.username == resource.data.username || 
           !usernameExists(request.resource.data.username))));
    }
    
    // Username tracking collection for uniqueness enforcement
    match /usernames/{username} {
      // Only allow reading for username availability checks
      allow read: if request.auth != null;
      // Only allow creation during user registration
      allow create: if request.auth != null && 
        request.resource.data.uid == request.auth.uid;
      // Prevent updates and deletes to maintain username integrity
      allow update, delete: if false;
    }
    
    // Helper functions for username validation
    function isValidUsername(username) {
      return username is string &&
             username.size() >= 3 &&
             username.size() <= 20 &&
             username.matches('[a-z0-9_]+') &&
             !username.matches('^[0-9]') &&
             !username.matches('__');
    }
    
    function usernameExists(username) {
      return exists(/databases/$(database)/documents/usernames/$(username));
    }
    
    // Blogs collection rules
    match /blogs/{blogId} {
      // Anyone can read blogs (public content)
      allow read: if true;
      
      // Only authenticated users can create blogs
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // Users can update blogs they authored, or update likes/bookmarks/comments
      allow update: if request.auth != null && (
        // Author can update their own blog
        request.auth.uid == resource.data.authorId ||
        // Users can like/unlike blogs
        request.auth.uid in request.resource.data.keys() ||
        // Users can bookmark/unbookmark blogs
        request.auth.uid in resource.data.bookmarks ||
        request.auth.uid in request.resource.data.bookmarks ||
        // Users can like/unlike blogs  
        request.auth.uid in resource.data.likes ||
        request.auth.uid in request.resource.data.likes
      );
      
      // Only blog authors can delete their blogs
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments subcollection rules (if you plan to use subcollections)
    match /blogs/{blogId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        request.auth.uid in resource.data.likes ||
        request.auth.uid in request.resource.data.likes
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
  }
}
